/**
 * This is the Gradle build script.
 */

description = "This is the CSA Prioritization Tool build file. It uses spring boot."

buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/libs-snapshot" } 
    }
    dependencies {
        // Spring boot integration with gradle
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.1.RELEASE")
        // Plugin to reload changed classes with out restarting
        classpath("org.springframework:springloaded:1.2.1.RELEASE")
    }
}

// Includes java plugin
apply plugin: 'war'
apply plugin: 'spring-boot'

// This customization is directly guided to Openshift deployment
war {
    archiveName = 'ROOT.war'
    destinationDir = file('webapps')
}

// Hopefully speeds up the process of searching for a proper main class
bootRepackage {
    mainClass = 'org.cgiar.ccafs.csa.CSAToolApplication'
}

// Location of the libraries for the application. They are tried from top to bottom.
repositories {
    mavenLocal()
    jcenter()
    maven {
        //This is not normally used as the local modified copy of this library is used
        url "http://lightadmin.org/nexus/content/repositories/snapshots"
    }    
}

/*
* These dependencies actually determinate the behavior of the application. Spring boot
* Searches the jars and configures the app in a way that works with the libraries.
* This particular app, has support for Spring Mvc, JPA and Security. LightAdmin, 
* Prime Faces with extensions, Postgresql and H2 databases, and an embedded Tomcat.
*/
dependencies {

    compile "org.springframework.boot:spring-boot-starter:1.2.1.RELEASE"
    
    compile "org.springframework:spring-webmvc:4.1.4.RELEASE"
    compile "org.springframework:spring-aspects:4.1.4.RELEASE"
    compile "org.aspectj:aspectjweaver:1.8.4"

    // Includes tomcat-embed-core, tomcat-embed-el, ecj
    providedCompile "org.apache.tomcat.embed:tomcat-embed-jasper:8.0.15"
    providedCompile "org.apache.tomcat.embed:tomcat-embed-logging-juli:8.0.15"  

    compile ("org.springframework.data:spring-data-jpa:1.7.1.RELEASE") {
        exclude module: "aspectjrt"
    }
    compile "org.springframework:spring-orm:4.1.4.RELEASE"
    
    compile "org.hibernate:hibernate-entitymanager:4.3.7.Final"
    compile "org.hibernate:hibernate-validator:5.1.3.Final"

    // We don't know why it doesn't get included in the war file
    compile "org.javassist:javassist:3.18.1-GA"

    // Only needed for development and offline configurations
    providedCompile "com.h2database:h2:1.4.182"

    // Springloaded doesn't like Java 8 version. On production use tomcat pool
    providedRuntime "com.zaxxer:HikariCP-java6:2.2.5"

    // Production database driver is part of the container
    providedRuntime "org.postgresql:postgresql:9.2-1004-jdbc41"
    providedRuntime "mysql:mysql-connector-java:5.1.34"
    
    // This needs to remain 2.1.4 to make lightadmin to work 
    compile "org.springframework.data:spring-data-rest-webmvc:2.1.4.RELEASE"
	compile "com.fasterxml.jackson.core:jackson-databind:2.4.3"
	
    // For backend administration. Includes apache tiles
    compile "org.lightadmin:lightadmin:1.1.0.BUILD-SNAPSHOT"
    
    // Includes Primefaces libraries
    //compile "org.primefaces.extensions:primefaces-extensions:3.0.0"
    //compile 'org.primefaces.extensions:master-pom:3.5.0'
    compile "org.primefaces:primefaces:5.1"
    
    // Includes JSF libraries
    compile "com.sun.faces:jsf-api:2.2.9"
    compile "com.sun.faces:jsf-impl:2.2.9"
    
    // For testing
    testCompile "org.springframework:spring-test:4.1.4.RELEASE"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.10.8"
    testCompile "org.hamcrest:hamcrest-library:1.3"    
        
}

/*
* Gradle Wrapper task, it downloads Gradle and creates the proper environment for developers
* who get the source code from github.
*/
task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

/*
* Deploys the war file to the webapps folder in Tomcat
*/
task deploy(type: Copy, dependsOn: 'war') {
     from 'webapps/ROOT.war'
     into System.getenv("CATALINA_HOME") + '/webapps/'
 }
